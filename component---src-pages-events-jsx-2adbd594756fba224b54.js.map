{"version":3,"sources":["webpack:///./src/pages/events.jsx"],"names":["EventsPage","props","data","allDataJson","edges","node","events","forEach","event","date","Date","ref","React","createRef","sort","a","b","currentEvent","length","undefined","getImage","img","className","src","withPrefix","alt","title","pdf","href","target","getItem","i","key","onMouseEnter","this","showEvent","bind","showDayDate","toUpperCase","subtitle","scroll","current","scrollIntoView","behavior","render","imgList","map","Component","pageQuery"],"mappings":"8NAMA,IAEMA,E,oBACJ,WAAYC,GAAQ,IAAD,EACjB,cAAMA,IAAN,KACA,IAAMC,EAAOD,EAAMC,KAAKC,YAAYC,MAAM,GAAGC,KAF5B,OAGjBH,EAAKI,OAAOC,SAAQ,SAACC,GACnBA,EAAMC,KAAO,IAAIC,KAAKF,EAAMC,MAC5BD,EAAMG,IAAMC,IAAMC,eAEpB,EAAKP,OAASJ,EAAKI,OAAOQ,MAAK,SAACC,EAAGC,GAAJ,OAAUA,EAAEP,KAAOM,EAAEN,QACpD,EAAKQ,aAAe,EAAKX,OAAOY,OAAS,EAAKZ,OAAO,EAAKA,OAAOY,OAAS,QAAKC,EAR9D,E,kHAWnBC,SAAA,SAASZ,GACP,IAAMa,EAAM,yBAAKC,UAAU,YAAYC,IAAKC,YAAWhB,EAAMa,KAAMI,IAAKjB,EAAMkB,QAC9E,OAAOlB,EAAMmB,IAAM,uBAAGC,KAAMJ,YAAWhB,EAAMmB,KAAME,OAAO,UAAUR,GAAWA,G,EAGjFS,QAAA,SAAQtB,EAAOuB,GACb,OACE,wBAAIC,IAAG,cAAgBD,EAAKE,aAAcC,KAAKC,UAAUC,KAAKF,KAAM1B,IAClE,0BAAMc,UAAU,eACd,0BAAMA,UAAU,cAAce,YAAY7B,EAAMC,OAChD,0BAAMa,UAAU,eACbd,EAAMkB,MAAMY,cACb,6BACC9B,EAAM+B,SACP,6BACC/B,EAAMmB,IAAM,uBAAGC,KAAMJ,YAAWhB,EAAMmB,MAA1B,yCAA4E,O,EAOnGa,OAAA,SAAO7B,GACLA,EAAI8B,QAAQC,eAAe,CAAEC,SAAU,Y,EAGzCR,UAAA,SAAU3B,GACR0B,KAAKM,OAAOhC,EAAMG,M,EAGpBiC,OAAA,WAAU,IAAD,OACP,OACE,0BAAMtB,UAAU,kBACd,kBAAC,IAAD,CAAQI,MA/CG,6BAgDX,yBAAKf,IAAKuB,KAAKW,QAASvB,UAAU,mCAC/BY,KAAK5B,OAAOwC,KAAI,SAACtC,EAAOuB,GAAR,OACf,yBAAKpB,IAAKH,EAAMG,IAAKqB,IAAG,aAAeD,GACpC,EAAKX,SAASZ,QAIrB,yBAAKc,UAAU,+BACb,4BACGY,KAAK5B,OAAOwC,KAAI,SAACtC,EAAOuB,GAAR,OAAc,EAAKD,QAAQtB,EAAOuB,U,GAvDtCnB,IAAMmC,WA+DhB/C,YAER,IAAMgD,EAAS","file":"component---src-pages-events-jsx-2adbd594756fba224b54.js","sourcesContent":["import { graphql, withPrefix } from 'gatsby';\nimport React from 'react';\nimport Helmet from 'react-helmet';\nimport { showDayDate } from '../components/utils';\nimport './event.scss';\n\nconst PAGE_TITLE = 'Archives | Figure Figure';\n\nclass EventsPage extends React.Component {\n  constructor(props) {\n    super(props);\n    const data = props.data.allDataJson.edges[0].node;\n    data.events.forEach((event) => {\n      event.date = new Date(event.date);\n      event.ref = React.createRef();\n    });\n    this.events = data.events.sort((a, b) => b.date - a.date);\n    this.currentEvent = this.events.length ? this.events[this.events.length - 1] : undefined;\n  }\n\n  getImage(event) {\n    const img = <img className=\"event-img\" src={withPrefix(event.img)} alt={event.title} />;\n    return event.pdf ? <a href={withPrefix(event.pdf)} target=\"_blank\">{img}</a> : img;\n  }\n\n  getItem(event, i) {\n    return (\n      <li key={`event item ${i}`} onMouseEnter={this.showEvent.bind(this, event)}>\n        <span className=\"event-descr\">\n          <span className=\"event-date\">{showDayDate(event.date)}</span>\n          <span className=\"event-title\">\n            {event.title.toUpperCase()}\n            <br />\n            {event.subtitle}\n            <br />\n            {event.pdf ? <a href={withPrefix(event.pdf)}>— Télécharger le communiqué de presse</a> : ''}\n          </span>\n        </span>\n      </li>\n    );\n  }\n\n  scroll(ref) {\n    ref.current.scrollIntoView({ behavior: 'smooth' });\n  }\n\n  showEvent(event) {\n    this.scroll(event.ref);\n  }\n\n  render() {\n    return (\n      <main className=\"row no-gutters\">\n        <Helmet title={PAGE_TITLE} />\n        <div ref={this.imgList} className=\"col-md-6 vh-site event-img-grid\">\n          {this.events.map((event, i) => (\n            <div ref={event.ref} key={`event img ${i}`}>\n              {this.getImage(event)}\n            </div>\n          ))}\n        </div>\n        <div className=\"col-md-6 vh-site event-grid\">\n          <ul>\n            {this.events.map((event, i) => this.getItem(event, i))}\n          </ul>\n        </div>\n      </main>\n    );\n  }\n}\n\nexport default EventsPage;\n\nexport const pageQuery = graphql`\n  query {\n    allDataJson {\n      edges {\n        node {\n          events {\n            title\n            subtitle\n            date\n            img\n            pdf\n          }\n        }\n      }\n    }\n  }\n`;\n"],"sourceRoot":""}